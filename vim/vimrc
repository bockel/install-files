
set nocompatible
filetype off

" Migrate from pathogen to vundle
" call pathogen#runtime_append_all_bundles()
" call pathogen#helptags()
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Vundle bundles:
Bundle 'gmarik/vundle'

Bundle 'altercation/vim-colors-solarized'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'docunext/closetag.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'bingaman/vim-sparkup'
Bundle 'kien/ctrlp.vim'
Bundle 'nvie/vim-rst-tables'

Bundle 'bockel/potwiki.vim'

" vim-script bundles
Bundle 'VOoM'
Bundle 'VST'
Bundle 'csv.vim'

filetype plugin indent on

" The leader character is your own personal modifier key,
" as g is Vim's modifier key (when compared to vi). The default
" leader is \, but this is not located standardly on all
" keyboards and requires a pinky stretch in any case. 
let mapleader = ","
" Hide buffers when they are abandoned
" set hidden makes problems with VCSVimdiff, Closing diff is not working right
set nojoinspaces
" enable backspace to delete anyting (includes \n) in insert mode
set backspace=indent,eol,start
set whichwrap+=<,>,h,l
set nocompatible
set number
set cursorline
set modelines=0
set showmode
set showcmd

if has("gui_running")
  set t_Co=256
else
  set t_Co=16
endif

if has("autochdir")
  set autochdir
endif
set scrolloff=5     "start scrolling 5 lines before edge of viewport
set sidescrolloff=3 " same, but for columns

" the following two settings assume that you know what you are doing
"set autowrite " automatically save changes when executing critical commands
set autoread " automatically detect changes and re-read the file
set display=lastline " display as much as possible from the last line
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=ucs-bom,utf-8,latin1
endif
" set encoding=utf-8

" -----------------------------------------------------------
" Spell
" -----------------------------------------------------------
set nospell
set spelllang=en
if filereadable("~/.vim/spell/spf.add")
 set spellfile=~/.vim/spell/spf.add
endif

set dictionary+=/usr/share/dict/words
" set digraph

" -----------------------------------------------------------
" Mouse setup
" -----------------------------------------------------------

set mousemodel=extend
" Enable mouse usage (all modes) in terminals
set mouse=a
" focus follows mouse
" set mousefocus

" -----------------------------------------------------------
" Bell setup
" -----------------------------------------------------------
" No bell or flash wanted
set noerrorbells
set novisualbell
set t_vb=

set list listchars=tab:»·,trail:·

" change the way backslashes are used in search patterns
set magic
" begin search at top when EOF reached
set wrapscan
" jump to matches during entering the pattern
set showmatch
set matchtime=3
set matchpairs+=<:> " these tokens belong together
" ...and also during entering the pattern
set incsearch
" If the search term highlighting gets annoying, set a key to switch it off temporarily:
"nmap <silent> <leader>n :silent :nohlsearch<CR>
" use 'g'-flag when substituting (subst. all matches in that line, not only first)
" to turn off, use g (why is there no -g ?)
set gdefault
" turn off the fucking :s///gc toggling
set noedcompatible

" -----------------------------------------------------------
" Relative Numbering
" -----------------------------------------------------------
set rnu
au BufEnter * :set rnu
au BufLeave * :set nu
au WinEnter * :set rnu
au WinLeave * :set nu
au InsertEnter * :set nu
au InsertLeave * :set rnu
au FocusLost * :set nu
au FocusGained * :set rnu

" -----------------------------------------------------------
" Leader mappings
" -----------------------------------------------------------
" Use the arrows to something usefull
map <right> :bn<cr>
map <left> :bp<cr>

" Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

map <leader>gf :tabe <cfile>.md<cr>

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

" -----------------------------------------------------------
" tabline settings
" -----------------------------------------------------------
set showtabline=1
nmap <leader>t <Esc>:tabnew<CR>


" -----------------------------------------------------------
" highlighting, colors, fonts
" -----------------------------------------------------------

set background=dark
"let g:solarized_termtrans=1
"let g:solarized_termcolors=256
let g:solarized_contrast="high"
"let g:solarized_visibility="high"
colorscheme solarized

" when we have a colored terminal or gui...
if &t_Co > 2 || has("gui_running")
    " ...then use highlighting
    syntax on
endif

if has("gui_running")
  "Standartgroesse bei'm GUI-Fenster
  "win 120 40
  "columns    width of the display
  set co=120
  "lines      number of lines in the display
  set lines=41
  " if has("win32")
    " set guifont=Bitstream_Vera_Sans_Mono:h8:cANSI
  " elseif has("gui_macvim")
    " set guifont=DejaVu\ Sans\ Mono:h12
  " else
    "set guifont=Monospace\ 8
    " set guifont=DejaVu\ Sans\ Mono\ 8
  " endif

  "colorscheme macvim

endif

" how many lines to sync backwards
syn sync minlines=10000 maxlines=10000
" how many lines to search backward after a jump to check syntax
let c_minlines = 200
" aldo highlight some things in comments
let c_comment_strings = 1

" statusline
" cf the default statusline: %<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
" format markers:
"   %< truncation point
"   %n buffer number
"   %f relative path to file
"   %m modified flag [+] (modified), [-] (unmodifiable) or nothing
"   %r readonly flag [RO]
"   %y filetype [ruby]
"   %w Preview window flag, text is "[Preview]"
"   %= split point for left and right justification
"   %-35. width specification
"   %l current line number
"   %L number of lines in buffer
"   %c current column number
"   %V current virtual column number (-n), if different from %c
"   %P percentage through buffer
"   %) end of width specification
set statusline=%<\ %n:%f\ %m%r%y%w%=%-35.(line:\ %l\ of\ %L,\ col:\ %c%V\ (%P)%)

" -----------------------------------------------------------
" Vim Diff
" -----------------------------------------------------------

"Ignore changes in amount of white space.
set diffopt+=iwhite


" -----------------------------------------------------------
" window handling
" -----------------------------------------------------------

" minimal number of lines used for the current window
set wh=1
" minimal number of lines used for any window
set wmh=0
" make all windows the same size when adding/removing windows
set equalalways
"a new window is put right the current one
set splitright

" -----------------------------------------------------------
" GUI
" -----------------------------------------------------------

" get rid of menu
set guioptions-=m

" get rid of toolbar
set guioptions-=T


" -----------------------------------------------------------
" WIN-GUI Specials
" -----------------------------------------------------------

" first of all: we don't use "behave windows"
" to try to get a better clipboard-handling
" (we do it ourself)

if has("win32")
    if has("gui_running")
        " alt jumps to menu
        set winaltkeys=menu
        " clipboard to autoselect
        set guioptions+=a

        " ---- Windows Like keys ----
        " CTRL-Z is Undo; not in cmdline though
        noremap <C-Z> u
        inoremap <C-Z> <C-O>u
        " CTRL-Y is Redo (although not repeat); not in cmdline though
        "noremap <C-Y> <C-R>
        "inoremap <C-Y> <C-O><C-R>
        " CTRL-A is Select all
        "noremap <C-A> gggH<C-O>G
        "inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
        "cnoremap <C-A> <C-C>gggH<C-O>G
        " CTRL-F4 is Close window
        noremap <C-F4> <C-W>c
        inoremap <C-F4> <C-O><C-W>c
        cnoremap <C-F4> <C-C><C-W>c
        " CTRL-Tab is Next window
        noremap <C-Tab> <C-W>w
        inoremap <C-Tab> <C-O><C-W>w
        cnoremap <C-Tab> <C-C><C-W>w
        " ---- Windows Like Copy-Paste keys ----
        " CTRL-v is paste
        "inoremap <C-v> <esc>"*p<return>i
        "noremap <C-v> "*p<return>
        " CTRL-x is cut (in visual mode only)
        "vnoremap <C-x> "*d
        " CTRL-c is copy (in visual mode only)
        "vnoremap <C-c> "*y
        " ---- Restore some remapped things 
        " make real <C-V> (visual block) as <C-Q> available
        noremap <c-q> <c-v>
        inoremap <C-Y> <C-Y>

    endif
endif

" -----------------------------------------------------------
" UNIX Specials
" -----------------------------------------------------------

if has("unix")
  set clipboard=autoselect
  set shell=/bin/bash
endif

" -----------------------------------------------------------
" Windows Specials
" -----------------------------------------------------------
if has("win32")
  set shell=C:\Windows\system32\cmd.exe
endif

" -----------------------------------------------------------
" Other Stuff
" -----------------------------------------------------------

" jump to the last position when reopening a file
if has("autocmd") && !exists("autocommands_loaded")
    let autocommands_loaded = 1
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\"" | endif

    au FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
    au FileType html,xhtml,xml,svg,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag.vim/plugin/closetag.vim
    " Load sparkup with xml files too
    au FileType html,xhtml,xml,svg source ~/.vim/bundle/vim-sparkup/ftplugin/html/sparkup.vim

    "au FileType rst,potwiki set sw=2 ts=2 sts=2

    "au BufWinEnter * let w:m1=matchadd('Search', '\%<81v.\%>77v', -1)
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>72v.\+', -1)
    " use `xmllint` to format XML markup
    au FileType xml,svg setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
    " make sure spell added to the toplevel syntax so it can be seen
    au FileType xml,svg syn spell toplevel
    " au BufNewFile,BufRead *.wiki set ft=rst
endif

imap jj <esc>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

map <c-h> <c-w>h
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l

set ai
set et
set tw=72
set sw=3
set ts=3
set sts=3
set autoindent
" add better handling of lists
set fo+=ncroq
" limite the syntax highlighting for long lines to improve performance
set synmaxcol=100
" set <leader>ft to fold HTML/XML tags
nnoremap <leader>ft Vatzf
" select last pasted text
nnoremap <leader>v V`]
" wrap paragraphs
nnoremap <leader>q gqip

" Improve up/down movement on wrapped linex
nnoremap j gj
nnoremap k gk

" Yank text to global clipboard
noremap <leader>y "*y
noremap <leader>Y "*Y
" Set proper indentation for pasting from clipboard
noremap <leader>p :set paste<CR>:put *<CR>:set nopaste<CR>

" allow doxygen support in C/C++ files
let g:load_doxygen_syntax=1

" customize PotWiki configuration
let potwiki_home = "$HOME/notes/HomePage.wiki"
let potwiki_home_dir = "$HOME/notes"
let potwiki_suffix = ".wiki"
let potwiki_autowrite = 1
" au Syntax potwiki runtime! syntax/rst.vim
" au FileType potwiki set ft=rst

